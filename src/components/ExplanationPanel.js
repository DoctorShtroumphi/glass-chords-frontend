import React, { useEffect, useRef } from 'react';

const ExplanationPanel = ({ panelsVisible, activePanel }) => {
  const containerRef = useRef(null);

  useEffect(() => {
    const calculateHeight = () => {
      const container = containerRef.current;
  
      if (!activePanel) {
        const generalPanel = container.querySelector('.general');
        const newHeight = (generalPanel?.scrollHeight || 0) + 50;
        container.style.height = `${newHeight}px`;
      } else if (activePanel) {
        const elementPanel = container.querySelector('.panel');
        const newHeight = (elementPanel?.scrollHeight || 0) + 50;
        container.style.height = `${newHeight}px`; // Set the container height to the sum
      }
    };

    // Calculate the height on component mount and whenever the panel changes
    calculateHeight();

    // Add event listener for window resize
    const handleResize = () => calculateHeight();
    window.addEventListener('resize', handleResize);

    // Clean up the event listener on component unmount
    return () => window.removeEventListener('resize', handleResize);
  }, [panelsVisible, activePanel]);

  return (
    <div
      ref={containerRef}
      style={{
        ...styles.explanationContainer,
        overflow: 'hidden', // Hide overflowing content during transition
        transition: 'height 0.5s ease', // Smooth height transition
      }}
    >
      {!panelsVisible || activePanel === null ? (
        <div className='general'>
          <h3>Welcome to GlassChords! Please read entirely before beginning.</h3>
          <p>
            GlassChords is an AI-powered chord generator that lets you explore how different factors impact the chords generated by the model. Before diving into the settings, try generating a few chords to get a feel for how the model works. Once you've done that, you'll be able to tweak the settings to see how they affect the music.
          </p>
          <p>
            The settings you'll interact with — such as training level, temperature, and loss functions — are not just specific to chord generation. These concepts are foundational to AI models across many domains, from music to natural language processing. For example, the same temperature setting you'll explore here is also used in text generation models like ChatGPT to adjust how creative or conservative the AI should be with its responses.
          </p>

          <h4>How to use the base Chord Generator:</h4>
          <p>There are two ways to use the chord generator. You can either <u>choose from a pre-made chord progression</u> for simplicity, or create your own progression as follows:</p>
          <ol>
            <li>Select the key your progression is in. This is needed for the model to generate chords properly.</li>
            <li>Enter four chords by clicking on the piano grid. A chord is created vertically; each column represents a single time step corresponding to one chord.</li>
          </ol>
          <p>You can also tick the <strong>Show off-key notes in red</strong> box to highlight notes that don't fit the selected key. This visual aid helps ensure that your chords are in harmony with the chosen key.</p>
          <p>When ready, press the <strong>Generate</strong> button. The last four columns of the piano grid will be filled with the model's generated output. You can then play the chords by pressing the <strong>Play</strong> button. It's recommended to tick the <strong>Loop once</strong> box to get a better sense of the musicality, especially when experimenting with different keys.</p>
          <p>Once you've generated your first progression, the next part of the study will open, allowing you to interact with three different controllable elements. Clicking on one of the three panels will show an explanation for it. After having played with each of the controllable elements at lease once, <strong>scroll to the bottom of the page to advance to the survey part</strong>. Thank you!</p>
        </div>
      ) : (
        <div className='panel'>
          <h3>Controllable elements</h3>
          <p>You've selected a controllable element. Read the following explanation, experiment with it and generate some chord progressions. Once you've tried all three different elements, please scroll to the bottom of the page and move on to the survey. Thank you!</p>
          {activePanel === 'training' && (
            <>
              <p><h4>Training Level</h4></p>
              <p>
                <strong>What is Training Level?</strong><br />
                This setting lets you choose between different versions of the AI model based on how much training it has received. A model with less training may produce more unpredictable or "creative" chords, while a fully trained model is more likely to produce chords that follow traditional musical patterns.
              </p>

              <p>
                <strong>Analogy: Teaching a Student Music</strong><br />
                Imagine teaching a student how to play music. At first, they might hit some wrong notes or come up with surprising (and maybe strange) ideas. As they practice and learn more, they start to get the hang of things, making fewer mistakes and playing more conventional music.
              </p>

              <p>
                <strong>How the AI Model Learns</strong><br />
                The AI works in a similar way! A model with less training is like a beginner student — creative, but not always consistent. A fully trained model, on the other hand, is like an experienced musician, sticking more closely to what's expected in music.
              </p>

              <p>
                <strong>Why Experiment with Different Training Levels?</strong><br />
                Explore different training levels to see how the model's understanding of music evolves with more or less experience. You might discover some interesting and unexpected results along the way!
              </p>
            </>
          )}
          {activePanel === 'temperature' && (
            <>
              <p><h4>Temperature:</h4></p>
              <p>
                <strong>What is Temperature?</strong><br />
                The temperature setting controls the "creativity" of the AI when generating chords. Think of it as a dial for adjusting how adventurous or conservative the model should be with its musical choices.
              </p>

              <p>
                <strong>Lower vs. Higher Temperatures</strong><br />
                A lower temperature (closer to 0) makes the model more conservative, generating chords that are predictable and closely aligned with its training data. On the flip side, a higher temperature (up to 2.0) increases randomness, leading to more unexpected and varied chord progressions. It's like asking the model to take more creative risks!
              </p>

              <p>
                <strong>Why Experiment with Temperature?</strong><br />
                Adjust the temperature to see how it influences the model's output. Whether you want to play it safe with familiar sounds or explore new musical possibilities, the temperature setting lets you fine-tune the AI's behavior to match your creative needs.
              </p>
            </>
          )}
          {activePanel === 'keyAwareLoss' && (
            <>
              <p><h4>Key-Aware Loss Function</h4></p>
              <p>
                <strong>What is a loss function?</strong><br />
                In machine learning, a loss function measures how well the AI is performing. Think of it as a scorecard that shows how far the AI is from the correct answer. The lower the score, the better it's doing. If the AI predicts the wrong chord, the loss function gives it a “penalty,” helping it learn and improve.
              </p>

              <p>
                <strong>Analogy: A School Test</strong><br />
                Imagine taking a test in school. If you get an answer wrong, you lose points. The more mistakes, the lower your score, and this feedback helps you study harder. Similarly, the AI uses the loss function to adjust and get better at its task.
              </p>

              <p>
                <strong>Introducing Key-Aware Loss</strong><br />
                Now, we've added something special — a key-aware loss function. This function doesn't just check if the AI's answer is right; it ensures that the answer fits the musical context (the key). When enabled, the AI gets extra penalties for generating chords that don't match the selected key.
              </p>

              <p>
                <strong>Analogy: A Stricter Teacher</strong><br />
                Think of the key-aware loss function as a stricter teacher. It doesn't just check your answers; it also makes sure you're following all the rules. In music, that means staying within the key.
              </p>

              <p>
                <strong>How Does It Work?</strong><br />
                The key-aware loss function evaluates how well each chord aligns with the notes in the selected key. If the AI generates a chord with notes that don't match, it receives a bigger penalty. This encourages the AI to stick to chords that sound musically coherent. Of course, disabling this option lets the AI explore more freely, which could lead to some unexpected, but interesting, musical ideas!
              </p>
            </>
          )}
        </div>
      )}
    </div>
  );
};

const styles = {
  explanationContainer: {
    padding: '20px',
    backgroundColor: '#d2d9df',
    borderRadius: '10px',
    boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',
    marginTop: '20px',
  },
};

export default ExplanationPanel;